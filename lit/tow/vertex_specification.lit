
--- vertex specification
//===============================
// vertex specification

@{vertex layout}
@{vertex array}
---

--- vertex specification implemention
//=====================================
// vertex specification implemention

@{vertex layout implemention}
@{vertex array implemention}
---

--- vertex layout
//--------------------
// vertex layout
class VertexLayout;
using VertexLayoutPtr = ResourcePtr<VertexLayout>;

class VertexLayout{
public:
    struct Attribute{
        int componentType{0};
        size_t componentCount{0};
        bool normalized{false};
        size_t offset{0};
        size_t sharedInstanceCount{0};
        int convertedType{GL_FLOAT};
    };

private:
    VertexLayout(){}

public:
    static ResourcePtr<VertexLayout> create();

public:
    void add(const std::string& name, const Attribute& attrib);
    void stride(size_t stride) { byteStride = stride; }

public:
    auto& getAttrib(const std::string& name) { return attribMap.at(name); }
    auto& getAttribMap() { return attribMap; }
    auto getStride() const { return byteStride; }
    auto getLocation(const std::string& name) const { return locationMap.at(name); }
    size_t getByteElement(const std::string& name) const;
    std::string getElementStr() const;
    size_t getHash() const;
    auto has(const std::string& name) const { return attribMap.find(name) != attribMap.end(); }

private:
    std::map<std::string, Attribute> attribMap;
    std::map<std::string, size_t> locationMap;
    size_t byteStride{0};
};
---

--- vertex layout implemention
//------------------------------
// vertex layout implemention
VertexLayoutPtr VertexLayout::create(){
    return VertexLayoutPtr(new VertexLayout());
}

void VertexLayout::add(const std::string& name, const VertexLayout::Attribute& attrib){
    attribMap.insert({name, attrib});
    locationMap.insert({name, attribMap.size()});
}

size_t VertexLayout::getHash() const{
    return std::hash<std::string>()(getElementStr());
}

std::string VertexLayout::getElementStr() const{
    std::string strHash;
    for(const auto& pr : attribMap){
        const auto& attrib = pr.second;
        const auto& str = pr.first.c_str();

        auto num = snprintf(nullptr, 0, "%s%d%u", str, attrib.componentType, attrib.componentCount);
        std::string buf(num, 0);

        snprintf(&buf[0], buf.size() + 1, "%s%d%u", str, attrib.componentType, attrib.componentCount);

        strHash += buf;
    }
    return strHash;
}

size_t VertexLayout::getByteElement(const std::string& name) const{
    const auto& attrib = attribMap.at(name);
    return s_byteComponentTypeMap.at(attrib.componentType) * attrib.componentCount;
}
---

--- vertex array
//---------------------
// vertex array
class VertexArray;
using VertexArrayPtr = tow::ResourcePtr<VertexArray>;

class VertexArray{
    friend class GraphicPipeline;

public:
    struct Buffer{
        BufferGroupPtr bufGroup;
        std::string vertexName;
        std::string indexName;

        auto hasIndexBufferDesc() const { return bufGroup->has(indexName); }
        auto getIndexBufferHandle() const { return bufGroup->getHandle(indexName); }
        auto getVertexBufferHandle() const { return bufGroup->getHandle(vertexName); }
        const auto& getIndexBufferDesc() const { return bufGroup->getDesc(indexName); }
        const auto& getVertexBufferDesc() const { return bufGroup->getDesc(vertexName); }
    };

private:
    VertexArray(){}
public:
    ~VertexArray();

public:
    static VertexArrayPtr create(const Buffer& buf, VertexLayoutPtr vertlayout);

private:
    auto getHandle() const { return vaHandle;}
    auto getVertexBufferHandle() const { return vaBuffer.getVertexBufferHandle(); }
    auto getIndexBufferHandle() const { return vaBuffer.getIndexBufferHandle(); }

public:
    const auto& getVertexLayout() const { return vertexLayout; }
    const auto& getBufferGroup() const { return vaBuffer.bufGroup; }
    auto hasIndexBufferDesc() const { return vaBuffer.hasIndexBufferDesc(); }

    auto getByteIndex() const { return vaBuffer.getIndexBufferDesc().byteElement;}
    auto getIndexCount() const { return vaBuffer.getIndexBufferDesc().elementCount; }
    auto getVertexCount() const { return vaBuffer.getVertexBufferDesc().elementCount; }
    auto getIndexType() const { return indexType; }

private:
    VertexLayoutPtr vertexLayout;
    GLuint vaHandle;
    Buffer vaBuffer;
    int indexType{0};
};
using VertexArrayPtr = ResourcePtr<VertexArray>;
---

--- vertex array implemention
VertexArray::~VertexArray(){
    DEL_OBJECT(glDeleteVertexArrays, vaHandle);
}

VertexArrayPtr VertexArray::create(const VertexArray::Buffer& buf, VertexLayoutPtr vertexLayout){
    auto ptr = new VertexArray();
    ptr->vertexLayout = vertexLayout;
    ptr->vaBuffer = buf;

    GEN_OBJECT(glGenVertexArrays, ptr->vaHandle);
    glBindVertexArray(ptr->vaHandle);

    // bind vertex buffer
    mAssert(buf.getVertexBufferDesc().target == GL_ARRAY_BUFFER);
    glBindBuffer(GL_ARRAY_BUFFER, buf.getVertexBufferHandle());

    // bind index buffer
    if (buf.hasIndexBufferDesc()){
        switch(buf.getIndexBufferDesc().byteElement){
            case sizeof(GLubyte):
                ptr->indexType = GL_UNSIGNED_BYTE;
                break;
            case sizeof(GLushort):
                ptr->indexType = GL_UNSIGNED_SHORT;
                break;
            case sizeof(GLuint):
                ptr->indexType = GL_UNSIGNED_INT;
                break;
            default:
                mAssert(false);
        }

        mAssert(buf.getIndexBufferDesc().target == GL_ELEMENT_ARRAY_BUFFER);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, buf.getIndexBufferHandle());
    }

    // specify vertex layout
    for(const auto& pr : vertexLayout->getAttribMap()){
        const auto& attrib = pr.second;
        auto location = vertexLayout->getLocation(pr.first);

        glEnableVertexAttribArray(location);

        if (attrib.convertedType == GL_FLOAT){
            glVertexAttribPointer(location, attrib.componentCount, attrib.componentType,
                attrib.normalized, vertexLayout->getStride(), (const void*)attrib.offset);
        }
        else if(attrib.convertedType == GL_INT || attrib.convertedType == GL_UNSIGNED_INT){
            glVertexAttribIPointer(location, attrib.componentCount, attrib.componentType,
                vertexLayout->getStride(), (const void*)attrib.offset);
        }
        else if(attrib.convertedType == GL_DOUBLE){
            glVertexAttribLPointer(location, attrib.componentCount, attrib.componentType,
                vertexLayout->getStride(), (const void*)attrib.offset);
        }

        if (attrib.sharedInstanceCount){
            glVertexAttribDivisor(location, attrib.sharedInstanceCount);
        }
    }

    glBindVertexArray(0);
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

    return VertexArrayPtr(ptr);
}
---
