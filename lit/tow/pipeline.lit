
--- pipeline
//=====================
// pipeline

@{graphic pipeline}
@{compute pipeline}
---

--- pipeline implemention
//=========================
// pipeline implemention

@{graphic pipeline implemention}
@{compute pipeline implemention}
---


--- graphic pipeline
//---------------------
// graphic pipeline
class GraphicPipeline;
using GraphicPipelinePtr = tow::ResourcePtr<GraphicPipeline>;

class GraphicPipeline{
private:
    GraphicPipeline(){}

public:
    static GraphicPipelinePtr create(VertexArrayPtr va, ProgramPtr prog);
    static GraphicPipelinePtr create(VertexArrayPtr va, const std::vector<Shader>& shaders);
    static GraphicPipelinePtr create(const VertexArray::Buffer& buf, ProgramPtr prog);
    static GraphicPipelinePtr create(const VertexArray::Buffer& buf, VertexLayoutPtr layout);
    static GraphicPipelinePtr create(const VertexArray::Buffer& buf, VertexLayoutPtr layout,
        const std::vector<Shader>& shaders);
public:
    // getter
    const auto& getVertexArray() const { return vertexArray; }
    const auto& getVertexLayout() const { return vertexArray->getVertexLayout(); }
    auto getIndexType() const { return vertexArray->getIndexType(); }
    auto getByteIndex() const { return vertexArray->getByteIndex(); }
    const auto& getBufferGroup() const { return vertexArray->getBufferGroup(); }
    const auto& getProgram() const { return program; }

    // setter
    void setVertexArray(VertexArrayPtr va) { vertexArray = va; }
    void setProgram(ProgramPtr prog) { program = program; }

    // drawing
    void setupDrawing();

private:
    VertexArrayPtr vertexArray;
    ProgramPtr program;

    GLint lastProgHandle{0};
    GLint lastVertexArrayHandle{0};
};
using GraphicPipelinePtr = GraphicPipelinePtr;
---

--- graphic pipeline implemention
//--------------------------------------
// graphic pipeline implemention
GraphicPipelinePtr GraphicPipeline::create(VertexArrayPtr va, ProgramPtr prog){
    auto ptr = new GraphicPipeline();
    ptr->vertexArray = va;
    ptr->program = prog;
    return GraphicPipelinePtr(ptr);
}

GraphicPipelinePtr GraphicPipeline::create(const VertexArray::Buffer& buf, ProgramPtr prog){
    auto va = VertexArray::create(buf, prog->getVertexLayout());
    return create(va, prog);
}

GraphicPipelinePtr GraphicPipeline::create(VertexArrayPtr va, const std::vector<Shader>& shaders){
    auto ptr = new GraphicPipeline();
    ptr->vertexArray = va;
    ptr->program = Program::create(shaders, va->getVertexLayout());
    return GraphicPipelinePtr(ptr);
}

GraphicPipelinePtr GraphicPipeline::create(const VertexArray::Buffer& buf, VertexLayoutPtr layout,
    const std::vector<Shader>& shaders){

    return create(VertexArray::create(buf, layout), Program::create(shaders, layout));
}

GraphicPipelinePtr GraphicPipeline::create(const VertexArray::Buffer& buf, VertexLayoutPtr layout){
    std::vector<Shader> shaders = {
        "assets/shaders/pipeline_shader.vert",
        "assets/shaders/pipeline_shader.frag",
    };
    return create(VertexArray::create(buf, layout), Program::create(shaders, layout));
}
void GraphicPipeline::setupDrawing(){
    if (program->link()){
        program->getShaderVarTable().build();
        program->check();
    }

    // get last using program
    glGetIntegerv(GL_CURRENT_PROGRAM, &lastProgHandle);

    // use program
    if ((GLuint)lastProgHandle != program->getHandle()){
        glUseProgram(program->getHandle());
    }
    program->send();

    // get last binding vertex array
    glGetIntegerv(GL_VERTEX_ARRAY_BINDING, &lastVertexArrayHandle);

    // use vertex array
    if ((GLuint)lastVertexArrayHandle != vertexArray->getHandle()){
        glBindVertexArray(vertexArray->getHandle());
    }

    // always bind vertex array buffers to prevent them from being lost
    glBindBuffer(GL_ARRAY_BUFFER, vertexArray->getVertexBufferHandle());
    if (vertexArray->hasIndexBufferDesc()){
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, vertexArray->getIndexBufferHandle());
    }
}

---

--- compute pipeline
//-------------------
// compute pipeline
class ComputePipeline;
using ComputePipelinePtr = tow::ResourcePtr<ComputePipeline>;

class ComputePipeline{
private:
    ComputePipeline(){}
public:
    ~ComputePipeline(){}

public:
    static ComputePipelinePtr create(ProgramPtr prog, int numX, int numY = 1, int numZ = 1);

public:
   void setupDispatch();
   void restore();

public:
    auto getNumX() const { return workgroupNumX; }
    auto getNumY() const { return workgroupNumY; }
    auto getNumZ() const { return workgroupNumZ; }

    void setNumX(int num) { workgroupNumX = num; }
    void setNumY(int num) { workgroupNumY = num; }
    void setNumZ(int num) { workgroupNumZ = num; }

    const auto& getProgram() const { return program; }

private:
    ProgramPtr program;

    int workgroupNumX{1};
    int workgroupNumY{1};
    int workgroupNumZ{1};

    GLint lastProgHandle{0};
};
---

--- compute pipeline implemention
//-----------------------------------
// compute pipeline implemention
ComputePipelinePtr ComputePipeline::create(ProgramPtr prog, int numX, int numY, int numZ){
    auto ptr = new ComputePipeline();
    ptr->program = prog;
    ptr->workgroupNumX = numX;
    ptr->workgroupNumY = numY;
    ptr->workgroupNumZ = numZ;
    return ComputePipelinePtr(ptr);
}

void ComputePipeline::setupDispatch(){
    // get last using program
    glGetIntegerv(GL_CURRENT_PROGRAM, &lastProgHandle);

    // use program
    if ((GLuint)lastProgHandle != program->getHandle()){
        glUseProgram(program->getHandle());
    }
}
---
